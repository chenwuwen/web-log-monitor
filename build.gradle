plugins {
    id 'java'
    id 'maven'
    id 'maven-publish'
//    加入这个插件,主要是为了在打包时可以将项目依赖的jar包同时打进去,执行gradlew shadow即可
//    https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow
    id "com.github.johnrengelman.shadow" version "5.2.0"
}


group 'cn.kanyun'
version '1.0.0'

sourceCompatibility = 1.8
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.java
}

//设置任务依赖关系,打jar包的同时,打源码包
jar.dependsOn(sourcesJar)

/**
 * 默认使用gradlew clean install命令时,仅仅只是安装编译好的包,源码包
 * 是不会安装到maven仓库的,添加此配置可以将源码包打入到本地maven仓库
 * doc包也可以如法炮制
 */
artifacts {
    archives sourcesJar
}

publishing {
    publications {
        myPublication(MavenPublication) {
//            如果是war包填写components.web，如果是jar包填写components.java
            from components.java
//            指定group/artifact/version信息，可以不填。默认使用项目group/name/version作为groupId/artifactId/version
//            groupId需要注意一下,如果下面仓库的配置是oss.sonatype.org(即中央仓库),那么这里的groupId必须为你在sonatype中申请的ISSUE中设置的ID,如果不是,执行gradlew publish命令会报403错误
            groupId "io.github.chenwuwen"
            artifactId "$project.name"
            version "$version"
            artifact(sourcesJar) {
                classifier = 'sources'
            }
        }
    }
    repositories {
        maven {
            if (project.version.endsWith('-SNAPSHOT')) {
//                快照版本地址
//            这里如果配置的是sonatype(中央仓库的地址),需要注意上方的groupId,应该跟sonatype中的对应的ISSUE中设置的Group Id 一致
                url "https://oss.sonatype.org/content/repositories/snapshots"
            } else {
//                正式版本地址
//                这里如果配置的是sonatype(中央仓库的地址),需要注意上方的groupId,应该跟sonatype中的对应的ISSUE中设置的Group Id 一致
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
            credentials {
                username = 'kanyun'
                password = 'Chenwuwen@@321'
            }
        }

    }
}

/**
 * 创建src目录
 */
task createDirs() {
    sourceSets*.java.srcDirs*.each {
        it.mkdirs()
    }
    sourceSets*.resources.srcDirs*.each {
        it.mkdirs()
    }
}

dependencies {

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.10'

    compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

    compileOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    compileOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.0'

    compileOnly group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.30'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    implementation group: 'com.google.guava', name: 'guava', version: '28.2-jre'

    implementation group: 'uk.org.lidalia', name: 'sysout-over-slf4j', version: '1.0.2'


}
